// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/FuckAll/ddd-golang/application/service"
	facade2 "github.com/FuckAll/ddd-golang/domain/leave/repository/facade"
	"github.com/FuckAll/ddd-golang/domain/leave/repository/persistence"
	service2 "github.com/FuckAll/ddd-golang/domain/leave/service"
	facade3 "github.com/FuckAll/ddd-golang/domain/person/repository/facade"
	persistence2 "github.com/FuckAll/ddd-golang/domain/person/repository/persistence"
	service3 "github.com/FuckAll/ddd-golang/domain/person/service"
	facade4 "github.com/FuckAll/ddd-golang/domain/rule/repository/facade"
	persistence3 "github.com/FuckAll/ddd-golang/domain/rule/repository/persistence"
	service4 "github.com/FuckAll/ddd-golang/domain/rule/service"
	"github.com/FuckAll/ddd-golang/infrastructure/common/event"
	"github.com/FuckAll/ddd-golang/interface/facade"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitAuthApi() *facade.AuthApi {
	engine := _wireEngineValue
	loginApplicationService := service.NewLoginApplicationService()
	authApi := facade.NewAuthApi(engine, loginApplicationService)
	return authApi
}

var (
	_wireEngineValue = DefaultEngine
)

func InitLeaveAPI() *facade.LeaveAPI {
	engine := _wireGinEngineValue
	eventPublisher := event.NewEventPublisher()
	leaveRepositoryImpl := persistence.NewLeaveRepositoryImpl()
	leaveFactory := service2.NewLeaveFactory()
	leaveDomainService := service2.NewLeaveDomainService(eventPublisher, leaveRepositoryImpl, leaveFactory)
	personRepositoryImpl := persistence2.NewPersonRepositoryImpl()
	personFactory := service3.NewPersonFactory(personRepositoryImpl)
	personDomainService := service3.NewPersonDomainService(personRepositoryImpl, personFactory)
	approvalRuleRepositoryImpl := persistence3.NewApprovalRuleRepositoryImpl()
	approvalRuleDomainService := service4.NewApprovalRuleDomainService(approvalRuleRepositoryImpl)
	leaveApplicationService := service.NewLeaveApplicationService(leaveDomainService, personDomainService, approvalRuleDomainService)
	leaveAPI := facade.NewLeaveAPI(engine, leaveApplicationService)
	return leaveAPI
}

var (
	_wireGinEngineValue = DefaultEngine
)

// wire.go:

var _ facade2.ILeaveRepository = &persistence.LeaveRepositoryImpl{}

var leaveAPISet = wire.NewSet(service2.NewLeaveDomainService, service3.NewPersonDomainService, service4.NewApprovalRuleDomainService)

var leaveDomainServiceSet = wire.NewSet(event.NewEventPublisher, wire.Bind(new(facade2.ILeaveRepository), new(*persistence.LeaveRepositoryImpl)), persistence.NewLeaveRepositoryImpl, service2.NewLeaveFactory)

var personDomainServiceSet = wire.NewSet(wire.Bind(new(facade3.PersonRepository), new(*persistence2.PersonRepositoryImpl)), persistence2.NewPersonRepositoryImpl, service3.NewPersonFactory)

var approvalRuleDomainServiceSet = wire.NewSet(wire.Bind(new(facade4.ApprovalRuleRepository), new(*persistence3.ApprovalRuleRepositoryImpl)), persistence3.NewApprovalRuleRepositoryImpl)
